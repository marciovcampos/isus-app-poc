'use strict';

var _riteway = require('riteway');

var _deepFreeze = require('deep-freeze');

var _deepFreeze2 = _interopRequireDefault(_deepFreeze);

var _activateFeatures = require('./activate-features');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var makeFeatures = function makeFeatures() {
  return (0, _deepFreeze2.default)([{
    name: 'foo',
    isActive: true
  }, {
    name: 'bar',
    isActive: true
  }, {
    name: 'baz',
    isActive: false
  }, {
    name: 'other',
    isActive: false
  }]);
};

(0, _riteway.describe)('activateFeatures()', function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(should) {
    var _should, assert;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _should = should(), assert = _should.assert;


            assert({
              given: 'an existing and non existing feature names',
              should: 'return the correct features',
              actual: (0, _activateFeatures.activateFeatures)(['baz', 'other', 'fizzle'])(makeFeatures()),
              expected: [{
                name: 'foo',
                isActive: true
              }, {
                name: 'bar',
                isActive: true
              }, {
                name: 'baz',
                isActive: true
              }, {
                name: 'other',
                isActive: true
              }]
            });

          case 2:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());